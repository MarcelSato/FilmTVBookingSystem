package org.gre.filmtv.Controller;


import java.io.IOException;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.gre.filmtv.Category;
import org.gre.filmtv.Course;
import org.gre.filmtv.Equipment;
import org.gre.filmtv.Tutor;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping(value = "equip")
public class equipController {
	
//	@ExceptionHandler(HttpSessionRequiredException.class)   
//	public String handleSessionExpired(){        
//	  return "login";
//	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(method = RequestMethod.POST)
	public String equip(HttpServletRequest request, Model model, @RequestParam("course") int course, @RequestParam("tutors") int tutor, @RequestParam("datepicker") String collectionDate, @RequestParam("datepickerReturn") String returnDate, @RequestParam("loc") String location) throws IOException{
		JSONObject jsonTest = new JSONObject();
		jsonTest.put("Tutor",Tutor.getTutorName(tutor));
		jsonTest.put("TutorID", tutor);
		jsonTest.put("Course", Course.getCourseName(course));
		jsonTest.put("CourseID", course);
		jsonTest.put("Collection", collectionDate);
		jsonTest.put("Return", returnDate);
		jsonTest.put("Location", location);
		model.addAttribute("Booking", jsonTest);
		request.getSession().setAttribute("courseId", course);
		return "equip";		
	}
	
	@RequestMapping(value="categories", method = RequestMethod.GET, produces="application/json")
	@ResponseBody
	
	public List<Object[]> categories(@RequestParam("cId") String jsonData) throws JsonParseException, JsonMappingException, IOException{
		Object myData = new ObjectMapper().readValue(jsonData, Object.class);
		return Category.getCat(myData);
	}
	
	@RequestMapping(value="equipment", method = RequestMethod.GET, produces="application/json")
	@ResponseBody
	
	public List<Object[]> equipment(@RequestParam("catId") String jsonData) throws JsonParseException, JsonMappingException, IOException{
		Object myData = new ObjectMapper().readValue(jsonData, Object.class);
		return Equipment.findAllEquipmentByCat(myData);
	}
	
	@RequestMapping(value="equipDetails", method = RequestMethod.GET, produces="application/json")
	@ResponseBody
	
	public List<Object[]> equipDetails(@RequestParam("eId") int eId){
		return Equipment.getEquipmentDetails(eId);
	}
	
	@RequestMapping(value="back", method = RequestMethod.GET, produces="application/json")
	@ResponseBody
	
	public String back(){
		System.out.println("TESTING:);
		return "equip";
	}
}


